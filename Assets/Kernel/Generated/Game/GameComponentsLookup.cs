//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentLookupGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static class GameComponentsLookup {

    public const int AnchoredToHandListener = 0;
    public const int DestructedListener = 1;
    public const int DisappearingStartedListener = 2;
    public const int HookingStartedListener = 3;
    public const int AccumulatedJumpForce = 4;
    public const int AnchoredToHand = 5;
    public const int Camera = 6;
    public const int CollidedEntityID = 7;
    public const int Collisionable = 8;
    public const int DefaultRotation = 9;
    public const int Destructable = 10;
    public const int Destructed = 11;
    public const int DirectionalForce = 12;
    public const int DisappearingDuration = 13;
    public const int DisappearingStarted = 14;
    public const int Duration = 15;
    public const int DurationLeft = 16;
    public const int DurationUp = 17;
    public const int FollowingEntityID = 18;
    public const int FollowingOffset = 19;
    public const int FollowingPlayerCharacter = 20;
    public const int FollowSpeed = 21;
    public const int GameBoard = 22;
    public const int GameBoardEndPart = 23;
    public const int GameLose = 24;
    public const int GravityForce = 25;
    public const int Height = 26;
    public const int HeightsDiapason = 27;
    public const int HeightsDiapasonRow = 28;
    public const int Hooked = 29;
    public const int HookedEntityID = 30;
    public const int HookingProcessDuration = 31;
    public const int HookingStarted = 32;
    public const int HorizontalBorder = 33;
    public const int HorizontalSpeed = 34;
    public const int ID = 35;
    public const int Interacted = 36;
    public const int Length = 37;
    public const int LifetimeDuration = 38;
    public const int MakingJump = 39;
    public const int MaxHeight = 40;
    public const int Movable = 41;
    public const int MovePosition = 42;
    public const int MovingDirection = 43;
    public const int Obtained = 44;
    public const int PlayerCharacter = 45;
    public const int PlayingStarted = 46;
    public const int Position = 47;
    public const int RagdollBody = 48;
    public const int Rotation = 49;
    public const int RotationSensitivity = 50;
    public const int RotationYBorder = 51;
    public const int RowPosition = 52;
    public const int RowsCount = 53;
    public const int Running = 54;
    public const int RunningSpeed = 55;
    public const int StartedFollowingFlyingPlayerCharacter = 56;
    public const int TargetRotation = 57;
    public const int ValuePanel = 58;
    public const int ValuePanelFunction = 59;
    public const int ValuePanelValue = 60;
    public const int MakingJumpListener = 61;
    public const int PositionListener = 62;
    public const int RagdollBodyListener = 63;
    public const int RotationListener = 64;
    public const int RunningListener = 65;
    public const int StartedFollowingFlyingPlayerCharacterListener = 66;

    public const int TotalComponents = 67;

    public static readonly string[] componentNames = {
        "AnchoredToHandListener",
        "DestructedListener",
        "DisappearingStartedListener",
        "HookingStartedListener",
        "AccumulatedJumpForce",
        "AnchoredToHand",
        "Camera",
        "CollidedEntityID",
        "Collisionable",
        "DefaultRotation",
        "Destructable",
        "Destructed",
        "DirectionalForce",
        "DisappearingDuration",
        "DisappearingStarted",
        "Duration",
        "DurationLeft",
        "DurationUp",
        "FollowingEntityID",
        "FollowingOffset",
        "FollowingPlayerCharacter",
        "FollowSpeed",
        "GameBoard",
        "GameBoardEndPart",
        "GameLose",
        "GravityForce",
        "Height",
        "HeightsDiapason",
        "HeightsDiapasonRow",
        "Hooked",
        "HookedEntityID",
        "HookingProcessDuration",
        "HookingStarted",
        "HorizontalBorder",
        "HorizontalSpeed",
        "ID",
        "Interacted",
        "Length",
        "LifetimeDuration",
        "MakingJump",
        "MaxHeight",
        "Movable",
        "MovePosition",
        "MovingDirection",
        "Obtained",
        "PlayerCharacter",
        "PlayingStarted",
        "Position",
        "RagdollBody",
        "Rotation",
        "RotationSensitivity",
        "RotationYBorder",
        "RowPosition",
        "RowsCount",
        "Running",
        "RunningSpeed",
        "StartedFollowingFlyingPlayerCharacter",
        "TargetRotation",
        "ValuePanel",
        "ValuePanelFunction",
        "ValuePanelValue",
        "MakingJumpListener",
        "PositionListener",
        "RagdollBodyListener",
        "RotationListener",
        "RunningListener",
        "StartedFollowingFlyingPlayerCharacterListener"
    };

    public static readonly System.Type[] componentTypes = {
        typeof(AnchoredToHandListenerComponent),
        typeof(DestructedListenerComponent),
        typeof(DisappearingStartedListenerComponent),
        typeof(HookingStartedListenerComponent),
        typeof(Kernel.Components.AccumulatedJumpForce),
        typeof(Kernel.Components.AnchoredToHand),
        typeof(Kernel.Components.Camera),
        typeof(Kernel.Components.CollidedEntityID),
        typeof(Kernel.Components.Collisionable),
        typeof(Kernel.Components.DefaultRotation),
        typeof(Kernel.Components.Destructable),
        typeof(Kernel.Components.Destructed),
        typeof(Kernel.Components.DirectionalForce),
        typeof(Kernel.Components.DisappearingDuration),
        typeof(Kernel.Components.DisappearingStarted),
        typeof(Kernel.Components.Duration),
        typeof(Kernel.Components.DurationLeft),
        typeof(Kernel.Components.DurationUp),
        typeof(Kernel.Components.FollowingEntityID),
        typeof(Kernel.Components.FollowingOffset),
        typeof(Kernel.Components.FollowingPlayerCharacter),
        typeof(Kernel.Components.FollowSpeed),
        typeof(Kernel.Components.GameBoard),
        typeof(Kernel.Components.GameBoardEndPart),
        typeof(Kernel.Components.GameLose),
        typeof(Kernel.Components.GravityForce),
        typeof(Kernel.Components.Height),
        typeof(Kernel.Components.HeightsDiapason),
        typeof(Kernel.Components.HeightsDiapasonRow),
        typeof(Kernel.Components.Hooked),
        typeof(Kernel.Components.HookedEntityID),
        typeof(Kernel.Components.HookingProcessDuration),
        typeof(Kernel.Components.HookingStarted),
        typeof(Kernel.Components.HorizontalBorder),
        typeof(Kernel.Components.HorizontalSpeed),
        typeof(Kernel.Components.ID),
        typeof(Kernel.Components.Interacted),
        typeof(Kernel.Components.Length),
        typeof(Kernel.Components.LifetimeDuration),
        typeof(Kernel.Components.MakingJump),
        typeof(Kernel.Components.MaxHeight),
        typeof(Kernel.Components.Movable),
        typeof(Kernel.Components.MovePosition),
        typeof(Kernel.Components.MovingDirection),
        typeof(Kernel.Components.Obtained),
        typeof(Kernel.Components.PlayerCharacter),
        typeof(Kernel.Components.PlayingStarted),
        typeof(Kernel.Components.Position),
        typeof(Kernel.Components.RagdollBody),
        typeof(Kernel.Components.Rotation),
        typeof(Kernel.Components.RotationSensitivity),
        typeof(Kernel.Components.RotationYBorder),
        typeof(Kernel.Components.RowPosition),
        typeof(Kernel.Components.RowsCount),
        typeof(Kernel.Components.Running),
        typeof(Kernel.Components.RunningSpeed),
        typeof(Kernel.Components.StartedFollowingFlyingPlayerCharacter),
        typeof(Kernel.Components.TargetRotation),
        typeof(Kernel.Components.ValuePanel),
        typeof(Kernel.Components.ValuePanelFunction),
        typeof(Kernel.Components.ValuePanelValue),
        typeof(MakingJumpListenerComponent),
        typeof(PositionListenerComponent),
        typeof(RagdollBodyListenerComponent),
        typeof(RotationListenerComponent),
        typeof(RunningListenerComponent),
        typeof(StartedFollowingFlyingPlayerCharacterListenerComponent)
    };
}
