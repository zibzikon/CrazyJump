//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Kernel.Components.RotationSensitivity rotationSensitivity { get { return (Kernel.Components.RotationSensitivity)GetComponent(GameComponentsLookup.RotationSensitivity); } }
    public bool hasRotationSensitivity { get { return HasComponent(GameComponentsLookup.RotationSensitivity); } }

    public void AddRotationSensitivity(float newValue) {
        var index = GameComponentsLookup.RotationSensitivity;
        var component = (Kernel.Components.RotationSensitivity)CreateComponent(index, typeof(Kernel.Components.RotationSensitivity));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceRotationSensitivity(float newValue) {
        var index = GameComponentsLookup.RotationSensitivity;
        var component = (Kernel.Components.RotationSensitivity)CreateComponent(index, typeof(Kernel.Components.RotationSensitivity));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveRotationSensitivity() {
        RemoveComponent(GameComponentsLookup.RotationSensitivity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotationSensitivity;

    public static Entitas.IMatcher<GameEntity> RotationSensitivity {
        get {
            if (_matcherRotationSensitivity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotationSensitivity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotationSensitivity = matcher;
            }

            return _matcherRotationSensitivity;
        }
    }
}
